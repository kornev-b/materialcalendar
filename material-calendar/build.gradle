apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'MaterialCalendar'
    bintrayName = 'material-calendar'

        publishedGroupId = 'com.shuhart'
    libraryName = 'material-calendar'
    artifact = 'material-calendar'

    libraryDescription = 'A Material design back port of Android\'s CalendarView.'

    siteUrl = 'https://github.com/shuhart/materialcalendar'
    gitUrl = 'https://github.com/shuhart/materialcalendar.git'

    libraryVersion = '1.0.1'

    developerId = 'shuhart'
    developerName = 'Redrick Shuhart'
    developerEmail = 'kornev.b@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        abortOnError false
    }
    buildToolsVersion '26.0.2'
}

dependencies {
    compile rootProject.ext.supportV4
    compile rootProject.ext.supportAppCompat
    compile rootProject.ext.supportAnnotations

    rootProject.ext.testDep.each { testCompile it }
    rootProject.ext.androidTestDep.each { androidTestCompile it }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title "Material CalendarView ${version}"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
    }
}

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
}

artifacts {
    archives sourcesJar
}

// Bintray
File localProps = project.rootProject.file('local.properties')

if (localProps.exists()) {
    Properties properties = new Properties()
    properties.load(localProps.newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true
            publicDownloadNumbers = true
            version {
                name = libraryVersion
                desc = libraryDescription
            }
        }
    }
}




